generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id @default(cuid())
  name                  String
  email                 String            @unique
  password              String
  college               String?
  collegeIDPath         String?
  collegeIdImage        String?           // Final URL from Cloudinary
  role                  String            @default("USER")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  posts                 Post[]
  resources             Resource[]
  events                Event[]
  mentors               Mentor[]
  followed              Follow[]          @relation("Follower")
  following             Follow[]          @relation("Following")
  appliedOpportunities  Opportunity[]     @relation("AppliedOpportunities")
  savedOpportunities    Opportunity[]     @relation("SavedOpportunities")
  postedOpportunities   Opportunity[]     @relation("PostedOpportunities")
  conversations         Conversation[]    @relation("ConversationParticipants")
  messagesSent          Message[]         @relation("UserMessagesSent")
  campusWalls           CampusWall[]
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  subject     String
  uploadedBy  User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Mentor {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  bio         String
  category    String
  subcategory String
  verified    Boolean  @default(false)
  linkedin    String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Opportunity {
  id          String   @id @default(cuid())
  title       String
  description String
  domain      String
  type        String
  link        String
  postedBy    User     @relation("PostedOpportunities", fields: [postedById], references: [id])
  postedById  String
  applicants  User[]   @relation("AppliedOpportunities")
  savedBy     User[]   @relation("SavedOpportunities")
  createdAt   DateTime @default(now())
}

model Conversation {
  id           String       @id @default(cuid())
  participants User[]       @relation("ConversationParticipants")
  messages     Message[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  content        String?
  fileUrl        String?
  type           MessageType  @default(TEXT)
  isSeen         Boolean      @default(false)
  senderId       String
  sender         User         @relation("UserMessagesSent", fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

model CampusWall {
  id         Int      @id @default(autoincrement())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  college    String
  content    String
  createdAt  DateTime @default(now())
}

model College {
  id        Int      @id @default(autoincrement())
  name      String
  location  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
