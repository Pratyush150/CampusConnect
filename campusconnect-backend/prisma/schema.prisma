generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserType {
  STUDENT
  MENTOR
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum OpportunityType {
  INTERNSHIP
  JOB
  PROJECT
  OTHER
}

model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  type              UserType
  college           String?
  profilePic        String?
  role              UserRole  @default(USER)
  isVerified        Boolean   @default(false)
  verificationToken String?
  otp               String?
  otpExpiration     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  refreshToken      String?

  // Relations
  student           Student?
  mentor            Mentor?

  posts             Post[]
  resources         Resource[]
  events            Event[]

  // Following system (User follows User)
  followedBy        Follow[] @relation("Follower")   // Users who follow this user
  following         Follow[] @relation("Following")  // Users this user follows

  // Opportunities
  appliedOpportunities Opportunity[] @relation("Application")
  savedOpportunities   Opportunity[] @relation("SavedOpportunities")
  postedOpportunities  Opportunity[] @relation("PostedOpportunities")

  // Messaging
  conversations     Conversation[] @relation("ConversationParticipants")
  messages          Message[]      @relation("UserMessagesSent")
  campusWalls       CampusWall[]
}

model Student {
  userId    String  @id @unique
  user      User    @relation(fields: [userId], references: [id])
  major     String?
  year      Int?
}

model Mentor {
  userId      String  @id @unique
  user        User    @relation(fields: [userId], references: [id])
  bio         String
  category    String
  subcategory String
  verified    Boolean @default(false)
  linkedin    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  subject     String
  userId      String
  uploadedBy  User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  location    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Opportunity {
  id          String          @id @default(cuid())
  title       String
  description String
  domain      String
  type        OpportunityType
  link        String
  postedById  String
  postedBy    User            @relation("PostedOpportunities", fields: [postedById], references: [id])
  applicants  User[]          @relation("Application")
  savedBy     User[]          @relation("SavedOpportunities")
  createdAt   DateTime        @default(now())
}

model Conversation {
  id           String     @id @default(cuid())
  participants User[]     @relation("ConversationParticipants")
  messages     Message[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  content        String?
  fileUrl        String?
  type           MessageType  @default(TEXT)
  isSeen         Boolean      @default(false)
  sender         User         @relation("UserMessagesSent", fields: [senderId], references: [id])
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  createdAt      DateTime     @default(now())
}

model CampusWall {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  college   String
  content   String
  createdAt DateTime @default(now())
}

model College {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  address   String?
  city      String?
  state     String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
