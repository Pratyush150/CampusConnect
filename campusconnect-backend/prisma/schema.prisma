generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserType {
  STUDENT
  MENTOR
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum OpportunityType {
  INTERNSHIP
  JOB
  PROJECT
  OTHER
}

model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  college           String?
  profilePic        String?
  role              UserRole  @default(USER)
  isVerified        Boolean   @default(false)
  verificationToken String?
  otp               String?
  otpExpiration     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  refreshToken      String?

  // One-to-one relations (only define fields+references here)
  studentDetails Student? @relation("UserStudent")
  mentorDetails  Mentor?  @relation("UserMentorDetails")

  // One-to-many (user has many mentors they follow)
  mentors Mentor[] @relation("UserMentors")

  posts                Post[]
  resources            Resource[]
  events               Event[]
  followed             Follow[]       @relation("Follower")
  following            Follow[]       @relation("Following")
  appliedOpportunities Opportunity[]  @relation("AppliedOpportunities")
  savedOpportunities   Opportunity[]  @relation("SavedOpportunities")
  postedOpportunities  Opportunity[]  @relation("PostedOpportunities")
  conversations        Conversation[] @relation("ConversationParticipants")
  messagesSent         Message[]      @relation("UserMessagesSent")
  campusWalls          CampusWall[]
}

model Student {
  userId String @id
  user   User   @relation("UserStudent", fields: [userId], references: [id])
  // Add student-specific fields here
}

model Mentor {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  user        User     @relation("UserMentorDetails", fields: [userId], references: [id])
  bio         String
  category    String
  subcategory String
  verified    Boolean  @default(false)
  linkedin    String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // This is the opposite field for the `User.mentors` one-to-many relation
  followedBy User[] @relation("UserMentors")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  subject     String
  userId      String
  uploadedBy  User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  location    String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Opportunity {
  id          String          @id @default(cuid())
  title       String
  description String
  domain      String
  type        OpportunityType
  link        String
  postedById  String
  postedBy    User            @relation("PostedOpportunities", fields: [postedById], references: [id])
  applicants  User[]          @relation("AppliedOpportunities")
  savedBy     User[]          @relation("SavedOpportunities")
  createdAt   DateTime        @default(now())
}

model Conversation {
  id           String    @id @default(cuid())
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  content        String?
  fileUrl        String?
  type           MessageType  @default(TEXT)
  isSeen         Boolean      @default(false)
  senderId       String
  sender         User         @relation("UserMessagesSent", fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
}

model CampusWall {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  college   String
  content   String
  createdAt DateTime @default(now())
}

model College {
  id        Int      @id @default(autoincrement())
  name      String
  location  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
